;; Storage
;;
;; counter_contract_code

(cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_ref() ;; counter_contract_code
    );
}

cell calculate_counter_state_init(cell counter_code, slice admin_addr) {
    
    cell data = 
        begin_cell()
            .store_slice(admin_addr) ;; admin_addr
            .store_uint(0, 64) ;; counter_num
        .end_cell();
    
    return 
        begin_cell()
            .store_uint(0, 2)
            .store_dict(counter_code)
            .store_dict(data)
            .store_uint(0, 1)
        .end_cell();

}

slice calculate_counter_address(int wc, cell state_init) {
    
    return 
        begin_cell()
            .store_uint(4, 3)
            .store_int(wc, 8)
            .store_uint(cell_hash(state_init), 256)
        .end_cell()
        .begin_parse();

}

() deploy_counter(cell counter_code, slice admin_addr, int amount) impure {
    
    cell state_init = calculate_counter_state_init(counter_code, admin_addr);
    slice counter_address = calculate_counter_address(workchain(), state_init);
    
    cell data = 
        begin_cell()
        .end_cell();

    var msg = 
        begin_cell()
            .store_uint(0x18, 6)
            .store_slice(counter_address)
            .store_coins(amount)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(data);

    send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors

}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {

    slice cs = in_msg_full.begin_parse();

    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return (); ;; terminate contract execution
    }

    slice sender_address = cs~load_msg_addr();
    force_chain(sender_address); ;; check workchain = 0

    if (msg_value < 100000000) { ;; check the amount > 0.1

        send_ton(sender_address, 0, 64); ;; send ton back

        return (); ;; terminate contract execution
    }

    cell counter_contract_code = load_data();

    deploy_counter(counter_contract_code, sender_address, 50000000);
    send_ton(sender_address, 0, 64);
    
}