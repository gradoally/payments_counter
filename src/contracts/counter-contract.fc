;; Storage
;;
;; slice admin_addr
;; int counter_num

;; in_msg_body
;;
;; int op
;; slice new_admin_address

(slice, int) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_msg_addr(), ;; admin_addr
        ds~load_uint(64) ;; counter_num
    );
}

() store_data(slice new_admin_addr, int new_counter_num) impure {
    set_data(
        begin_cell()
            .store_slice(new_admin_addr) ;; admin_addr
            .store_uint(new_counter_num, 64) ;; counter_num
        .end_cell()
    );
}

() send_ton(slice to_address, int amount, int send_mode) impure inline {
  
  var msg = 
    begin_cell()
        .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
        .store_slice(to_address)
        .store_coins(amount)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .end_cell();

  send_raw_message(msg, send_mode);

}


() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    
    slice cs = in_msg_full.begin_parse();

    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return (); ;; terminate contract execution
    }

    slice sender_address = cs~load_msg_addr();
    force_chain(sender_address); ;; check workchain = 0

    if (msg_value < 100000000) { ;; check the amount > 0.1

        send_ton(sender_address, 0, 64); ;; send ton back

        return (); ;; terminate contract execution
    }
 
    if (in_msg_body.slice_empty?()) { ;; if msg_body is empty
    
        var (admin_addr, counter_num) = load_data();
        send_ton(admin_addr, 0, 64); ;; forward amount to admin_addr excluding fees
        int new_counter_num = counter_num + 1; ;; increase counter_num by 1
        store_data(admin_addr, new_counter_num); ;; rewrite contract memory

        return ();

    }
    
    int op = in_msg_body~load_uint(64); ;; load op code

    if (op == 1) { ;; change admin addr

        var (admin_addr, counter_num) = load_data();
        throw_unless(401, equal_slices(admin_addr, sender_address)); ;; check sender_addr == admin_addr
        slice new_admin_address = in_msg_body~load_msg_addr();
        force_chain(new_admin_address);
        store_data(new_admin_address, counter_num);
        send_ton(new_admin_address, 0, 64);
        return (); ;; terminate contract execution

    }

}

(int) get_counter_num() method_id {
    (_, int counter_num) = load_data();
    return counter_num;
}

(slice) get_counter_admin() method_id {
    (slice admin_addr, _) = load_data();
    return admin_addr;
}